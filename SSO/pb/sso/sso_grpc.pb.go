// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sso

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSOServiceClient is the client API for SSOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOServiceClient interface {
	HaveAccess(ctx context.Context, in *QueryAccessRequest, opts ...grpc.CallOption) (*QueryAccessResponse, error)
	GetUserInfo(ctx context.Context, in *QueryUserInfoRequest, opts ...grpc.CallOption) (*User, error)
}

type sSOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOServiceClient(cc grpc.ClientConnInterface) SSOServiceClient {
	return &sSOServiceClient{cc}
}

func (c *sSOServiceClient) HaveAccess(ctx context.Context, in *QueryAccessRequest, opts ...grpc.CallOption) (*QueryAccessResponse, error) {
	out := new(QueryAccessResponse)
	err := c.cc.Invoke(ctx, "/sso.SSOService/HaveAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) GetUserInfo(ctx context.Context, in *QueryUserInfoRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/sso.SSOService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServiceServer is the server API for SSOService service.
// All implementations must embed UnimplementedSSOServiceServer
// for forward compatibility
type SSOServiceServer interface {
	HaveAccess(context.Context, *QueryAccessRequest) (*QueryAccessResponse, error)
	GetUserInfo(context.Context, *QueryUserInfoRequest) (*User, error)
	mustEmbedUnimplementedSSOServiceServer()
}

// UnimplementedSSOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSOServiceServer struct {
}

func (UnimplementedSSOServiceServer) HaveAccess(context.Context, *QueryAccessRequest) (*QueryAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HaveAccess not implemented")
}
func (UnimplementedSSOServiceServer) GetUserInfo(context.Context, *QueryUserInfoRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedSSOServiceServer) mustEmbedUnimplementedSSOServiceServer() {}

// UnsafeSSOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServiceServer will
// result in compilation errors.
type UnsafeSSOServiceServer interface {
	mustEmbedUnimplementedSSOServiceServer()
}

func RegisterSSOServiceServer(s grpc.ServiceRegistrar, srv SSOServiceServer) {
	s.RegisterService(&SSOService_ServiceDesc, srv)
}

func _SSOService_HaveAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).HaveAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.SSOService/HaveAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).HaveAccess(ctx, req.(*QueryAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.SSOService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).GetUserInfo(ctx, req.(*QueryUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOService_ServiceDesc is the grpc.ServiceDesc for SSOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.SSOService",
	HandlerType: (*SSOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HaveAccess",
			Handler:    _SSOService_HaveAccess_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _SSOService_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}
